/*
 * Alarm Backend
 *
 * ## API for generating and tracking alarms  This is the API of what P7M mainly uses within the Telfas service.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewAlarmRecipient {
    #[serde(rename = "recipientId")]
    pub recipient_id: uuid::Uuid,
    #[serde(rename = "medium")]
    pub medium: models::AlarmMedium,
    #[serde(rename = "phoneNumber")]
    pub phone_number: String,
    #[serde(rename = "submissionTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub submission_time: Option<Option<String>>,
    #[serde(rename = "deliveryTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub delivery_time: Option<Option<String>>,
    #[serde(rename = "confirmation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub confirmation: Option<Option<models::AlarmConfirmation>>,
    #[serde(rename = "confirmationTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub confirmation_time: Option<Option<String>>,
}

impl NewAlarmRecipient {
    pub fn new(recipient_id: uuid::Uuid, medium: models::AlarmMedium, phone_number: String) -> NewAlarmRecipient {
        NewAlarmRecipient {
            recipient_id,
            medium,
            phone_number,
            submission_time: None,
            delivery_time: None,
            confirmation: None,
            confirmation_time: None,
        }
    }
}

