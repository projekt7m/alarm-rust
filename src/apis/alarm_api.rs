/*
 * Alarm Backend
 *
 * ## API for generating and tracking alarms  This is the API of what P7M mainly uses within the Telfas service.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: tech@p7m.de
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`delete_alarms_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAlarmsIdError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_alarms_recipients_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAlarmsRecipientsIdError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_alarms`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAlarmsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_alarms_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAlarmsIdError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_alarms_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAlarmsRecipientsError {
    Status401(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_alarms_recipients_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAlarmsRecipientsIdError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_alarm`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostAlarmError {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_alarm_recipients`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostAlarmRecipientsError {
    Status401(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_alarms_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutAlarmsIdError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_alarms_recipients_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutAlarmsRecipientsIdError {
    Status400(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// This does not cancel the alarm! Use PUT for canceling.
pub async fn delete_alarms_id(configuration: &configuration::Configuration, alarm_id: &str) -> Result<(), Error<DeleteAlarmsIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;

    let uri_str = format!("{}/alarms/{alarm_id}", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAlarmsIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_alarms_recipients_id(configuration: &configuration::Configuration, alarm_id: &str, alarm_recipient_id: &str) -> Result<(), Error<DeleteAlarmsRecipientsIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;
    let p_alarm_recipient_id = alarm_recipient_id;

    let uri_str = format!("{}/alarms/{alarm_id}/recipients/{alarm_recipient_id}", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id), alarm_recipient_id=crate::apis::urlencode(p_alarm_recipient_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAlarmsRecipientsIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_alarms(configuration: &configuration::Configuration, ) -> Result<models::ListWrapperAlarm, Error<GetAlarmsError>> {

    let uri_str = format!("{}/alarms", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListWrapperAlarm`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListWrapperAlarm`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAlarmsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_alarms_id(configuration: &configuration::Configuration, alarm_id: &str) -> Result<models::Alarm, Error<GetAlarmsIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;

    let uri_str = format!("{}/alarms/{alarm_id}", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Alarm`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Alarm`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAlarmsIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_alarms_recipients(configuration: &configuration::Configuration, alarm_id: &str) -> Result<models::ListWrapperAlarmRecipient, Error<GetAlarmsRecipientsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;

    let uri_str = format!("{}/alarms/{alarm_id}/recipients", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListWrapperAlarmRecipient`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListWrapperAlarmRecipient`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAlarmsRecipientsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_alarms_recipients_id(configuration: &configuration::Configuration, alarm_id: &str, alarm_recipient_id: &str) -> Result<models::AlarmRecipient, Error<GetAlarmsRecipientsIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;
    let p_alarm_recipient_id = alarm_recipient_id;

    let uri_str = format!("{}/alarms/{alarm_id}/recipients/{alarm_recipient_id}", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id), alarm_recipient_id=crate::apis::urlencode(p_alarm_recipient_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AlarmRecipient`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AlarmRecipient`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAlarmsRecipientsIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn post_alarm(configuration: &configuration::Configuration, new_alarm: models::NewAlarm) -> Result<models::Alarm, Error<PostAlarmError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_new_alarm = new_alarm;

    let uri_str = format!("{}/alarms", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_new_alarm);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Alarm`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Alarm`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PostAlarmError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn post_alarm_recipients(configuration: &configuration::Configuration, alarm_id: &str, new_alarm_recipient: models::NewAlarmRecipient) -> Result<models::AlarmRecipient, Error<PostAlarmRecipientsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;
    let p_new_alarm_recipient = new_alarm_recipient;

    let uri_str = format!("{}/alarms/{alarm_id}/recipients", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_new_alarm_recipient);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AlarmRecipient`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AlarmRecipient`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PostAlarmRecipientsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Can be used for canceling the alarm by setting the field cancellation_time to a value.
pub async fn put_alarms_id(configuration: &configuration::Configuration, alarm_id: &str, new_alarm: models::NewAlarm) -> Result<models::Alarm, Error<PutAlarmsIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;
    let p_new_alarm = new_alarm;

    let uri_str = format!("{}/alarms/{alarm_id}", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_new_alarm);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Alarm`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Alarm`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PutAlarmsIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn put_alarms_recipients_id(configuration: &configuration::Configuration, alarm_id: &str, alarm_recipient_id: &str, new_alarm_recipient: models::NewAlarmRecipient) -> Result<models::AlarmRecipient, Error<PutAlarmsRecipientsIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_alarm_id = alarm_id;
    let p_alarm_recipient_id = alarm_recipient_id;
    let p_new_alarm_recipient = new_alarm_recipient;

    let uri_str = format!("{}/alarms/{alarm_id}/recipients/{alarm_recipient_id}", configuration.base_path, alarm_id=crate::apis::urlencode(p_alarm_id), alarm_recipient_id=crate::apis::urlencode(p_alarm_recipient_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_new_alarm_recipient);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AlarmRecipient`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AlarmRecipient`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PutAlarmsRecipientsIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

